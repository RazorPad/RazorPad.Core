<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RazorPad.Compilation;
using RazorPad.Persistence;

namespace RazorPad.Core.Tests
{
    [TestClass]
    public class AcceptanceTests
    {
        private TemplateCompiler _templateCompiler;
        private RazorDocumentManager _loader;

        [TestInitialize]
        public void TestInitialize()
        {
            _loader = new RazorDocumentManager(new XmlRazorDocumentSource());
            _templateCompiler = new TemplateCompiler();
        }

<# 
	var directoryInfo = new DirectoryInfo(Host.ResolvePath(""));
	var directory = directoryInfo.Name;

	var razorDocuments = new List<FileInfo>();
	razorDocuments.AddRange(directoryInfo.GetFiles("*.cshtml"));
	razorDocuments.AddRange(directoryInfo.GetFiles("*.razorpad"));
	
	foreach(var file in razorDocuments) 
    {
        string resourceName = "AcceptanceTests." + file.Name.Replace("\\", ".");
        string outputResourceName = resourceName + ".output";
		string displayName = Path.GetFileNameWithoutExtension(file.Name);
#>
		
        [TestMethod]
        public void ShouldSupport<#= displayName #>()
        {
            var document = LoadDocument("<#= resourceName #>");

            var results = _templateCompiler.Execute(document);

            string output = LoadResource("<#= outputResourceName #>");
            Assert.AreEqual(output, results.Trim());
        }

<#
    }
#>


        private RazorDocument LoadDocument(string name)
        {
            using (var reader = GetResourceStream(name))
                return _loader.Load(reader);
        }

        private string LoadResource(string name)
        {
            using (var stream = GetResourceStream(name))
            using (var reader = new StreamReader(stream))
                return reader.ReadToEnd();
        }

        private Stream GetResourceStream(string resourceName)
        {
            var type = GetType();
            return type.Assembly.GetManifestResourceStream(type, resourceName);
        }
    }
}
